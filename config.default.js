exports.MAIN = {
	/* --------------------------- Server --------------------------- */
	SERVER_ID: null, // Use 'development' only during programming or testing. Setting it to 'production' has no effect. If you don't want to define the name at all, use null (not as a string).
	RUN_ON_START: true, // Should the reporting function run immediately after the script starts?

	/* --------------------------- Network --------------------------- */
	IP_REFRESH_SCHEDULE: '0 */6 * * *', // CRON: How often the script should check the IP address assigned by the ISP to prevent accidental self-reporting. If you have a static IP, you can set it to '0 0 1 * *' (once a month). Default: every 6 hours
	IPv6_SUPPORT: true, // Specifies whether the device has an assigned IPv6 address.

	/* --------------------------- Automatic Updates --------------------------- */
	AUTO_UPDATE_ENABLED: true, // Do you want the script to automatically update to the latest version using 'git pull'? (true = enabled, false = disabled)
	AUTO_UPDATE_SCHEDULE: '0 18 * * *', // CRON: Schedule for automatic script updates. Default: every day at 18:00

	/* --------------------------- Secret keys --------------------------- */
	CLOUDFLARE_ZONE_ID: '00000000000000000000000000000000', // https://github.com/sefinek/Cloudflare-WAF-To-AbuseIPDB/tree/main?tab=readme-ov-file#cloudflare_zone_id
	CLOUDFLARE_API_KEY: '0000000000000000000000000000000000000000', // https://github.com/sefinek/Cloudflare-WAF-To-AbuseIPDB/tree/main?tab=readme-ov-file#cloudflare_api_key
	ABUSEIPDB_API_KEY: '00000000000000000000000000000000000000000000000000000000000000000000000000000000', // https://github.com/sefinek/Cloudflare-WAF-To-AbuseIPDB/tree/main?tab=readme-ov-file#abuseipdb_api_key

	/* --------------------------- Cycles --------------------------- */
	// CRON: Schedule for running cron jobs for reporting to AbuseIPDB.
	REPORT_SCHEDULE: '0 */2 * * *',

	// The minimum time that must pass after reporting an IP address before it can be reported again.
	// The required time is >= 15 minutes, according to AbuseIPDB API limits.
	REPORTED_IP_COOLDOWN: 8 * 60 * 60 * 1000, // 8h

	// The maximum URI length that can be reported to AbuseIPDB. If Cloudflare returns a longer URI, the API request will fail.
	MAX_URL_LENGTH: 800,

	// Additional delay (in milliseconds) after each successful IP report to avoid overloading the AbuseIPDB API.
	SUCCESS_COOLDOWN: 10,

	/* --------------------------- Discord Webhooks --------------------------- */
	DISCORD_WEBHOOKS_ENABLED: false, // Should the script send webhooks with information about errors, execution status, and other events?
	DISCORD_WEBHOOKS_URL: '',
	DISCORD_WEBHOOK_USERNAME: 'SERVER_ID', // The name displayed as the message author on Discord. If you don't want to set it, leave the value as null. Providing SERVER_ID as a string will display this.MAIN.SERVER_ID.

	/* --------------------------- Sefinek API --------------------------- */
	// Report IP addresses to api.sefinek.net to support the development of the repository at https://github.com/sefinek/Malicious-IP-Addresses. SECRET_TOKEN is required if true.
	SEFIN_API_REPORTING: false,

	// Secret key for api.sefinek.net
	SEFIN_API_SECRET_TOKEN: '',

	// How often should the log (reported_ips.csv) be analyzed and sent to the Sefinek API?
	SEFIN_API_REPORT_SCHEDULE: '0 */2 * * *',
};

exports.GENERATE_COMMENT = ({ action, clientAsn, clientASNDescription, clientRequestHTTPProtocol, clientRequestHTTPMethodName, clientRequestHTTPHost, clientRequestPath, clientRequestQuery, datetime, rayName, ruleId, userAgent, source, clientCountryName }) => {
	const fields = [
		{ label: 'Action taken', value: action?.toUpperCase() },
		// { label: 'ASN', value: `${clientAsn} (${clientASNDescription})` },
		{ label: 'Protocol', value: `${clientRequestHTTPProtocol} (${clientRequestHTTPMethodName} method)` },
		// { label: 'Zone', value: clientRequestHTTPHost },
		{ label: 'Endpoint', value: clientRequestPath },
		// { label: 'Query', value: clientRequestQuery },
		// { label: 'Timestamp', value: datetime },
		// { label: 'Ray ID', value: rayName },
		// { label: 'Rule ID', value: ruleId },
		{ label: 'UA', value: userAgent || 'Empty string' },
	];

	const reportLines = fields
		.filter(({ value }) => value)
		.map(({ label, value }) => `${label}: ${value}`);

	return `Triggered Cloudflare WAF (${source}) from ${clientCountryName}.
${reportLines.join('\n')}

This report was generated by:
https://github.com/sefinek/Cloudflare-WAF-To-AbuseIPDB`; // Please don't delete this URL, I'd be very grateful. Thank you! ðŸ’™
};